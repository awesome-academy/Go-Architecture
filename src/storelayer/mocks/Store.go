// Code generated by mockery v2.36.1. DO NOT EDIT.

package mocks

import (
	entities "Go-Architecture/src/entities"

	mock "github.com/stretchr/testify/mock"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// CreateAnimal provides a mock function with given fields: _a0
func (_m *Store) CreateAnimal(_a0 entities.Animal) (entities.Animal, error) {
	ret := _m.Called(_a0)

	var r0 entities.Animal
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.Animal) (entities.Animal, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(entities.Animal) entities.Animal); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(entities.Animal)
	}

	if rf, ok := ret.Get(1).(func(entities.Animal) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllAnimals provides a mock function with given fields:
func (_m *Store) GetAllAnimals() ([]entities.Animal, error) {
	ret := _m.Called()

	var r0 []entities.Animal
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entities.Animal, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entities.Animal); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Animal)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAnimalById provides a mock function with given fields: id
func (_m *Store) GetAnimalById(id int) (entities.Animal, error) {
	ret := _m.Called(id)

	var r0 entities.Animal
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (entities.Animal, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) entities.Animal); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entities.Animal)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *Store {
	mock := &Store{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
